# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from fedvision.framework.protobuf import coordinator_pb2 as fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2


class CoordinatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_stream(
                '/fedvision.framework.coordinator.Coordinator/Subscribe',
                request_serializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Subscribe.REQ.SerializeToString,
                response_deserializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Subscribe.REP.FromString,
                )
        self.Proposal = channel.unary_unary(
                '/fedvision.framework.coordinator.Coordinator/Proposal',
                request_serializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Proposal.REQ.SerializeToString,
                response_deserializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Proposal.REP.FromString,
                )
        self.FetchTask = channel.unary_unary(
                '/fedvision.framework.coordinator.Coordinator/FetchTask',
                request_serializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.FetchTask.REQ.SerializeToString,
                response_deserializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.FetchTask.REP.FromString,
                )
        self.Leave = channel.unary_unary(
                '/fedvision.framework.coordinator.Coordinator/Leave',
                request_serializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Leave.REQ.SerializeToString,
                response_deserializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Leave.REP.FromString,
                )


class CoordinatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Proposal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Leave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Subscribe.REQ.FromString,
                    response_serializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Subscribe.REP.SerializeToString,
            ),
            'Proposal': grpc.unary_unary_rpc_method_handler(
                    servicer.Proposal,
                    request_deserializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Proposal.REQ.FromString,
                    response_serializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Proposal.REP.SerializeToString,
            ),
            'FetchTask': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchTask,
                    request_deserializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.FetchTask.REQ.FromString,
                    response_serializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.FetchTask.REP.SerializeToString,
            ),
            'Leave': grpc.unary_unary_rpc_method_handler(
                    servicer.Leave,
                    request_deserializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Leave.REQ.FromString,
                    response_serializer=fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Leave.REP.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'fedvision.framework.coordinator.Coordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Coordinator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/fedvision.framework.coordinator.Coordinator/Subscribe',
            fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Subscribe.REQ.SerializeToString,
            fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Subscribe.REP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Proposal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fedvision.framework.coordinator.Coordinator/Proposal',
            fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Proposal.REQ.SerializeToString,
            fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Proposal.REP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fedvision.framework.coordinator.Coordinator/FetchTask',
            fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.FetchTask.REQ.SerializeToString,
            fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.FetchTask.REP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Leave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/fedvision.framework.coordinator.Coordinator/Leave',
            fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Leave.REQ.SerializeToString,
            fedvision_dot_framework_dot_protobuf_dot_coordinator__pb2.Leave.REP.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
